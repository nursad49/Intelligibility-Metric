import numpy as np
import librosa
from scipy.signal import convolve2d
from skimage.util import view_as_blocks
import matplotlib.pyplot as plt

# Load the clean and noisy signals

#clean_signal_filepath = '/content/drive/MyDrive/DNS_challange_dataset/SOPM_dataset/clean/clean_signal_9.wav'
#noisy_signal_filepath = '/content/drive/MyDrive/DNS_challange_dataset/SOPM_dataset/noisy/noisy_clean_9_noise_1_SNR10.wav'

clean_signal, sr_clean = librosa.load(clean_signal_filepath, sr=None)
noisy_signal, sr_noisy = librosa.load(noisy_signal_filepath, sr=None)

# Ensure the sampling rates match
if sr_clean != sr_noisy:
    raise ValueError("Sampling rates of the clean and noisy signals must match.")



# Main function to calculate SOPM score between two audio files
def SOPM_from_audio(clean_signal, noisy_signal, MN=[4, 4], VH=None, moment_type='K', K_p=0.9):
    window = 256  # Window size for STFT
    noverlap = 128  # Overlap size (50%)
    nfft = 256  # FFT points

    # Convert audio signals to spectrograms
    S_clean = np.abs(librosa.stft(clean_signal, n_fft=nfft, hop_length=noverlap, win_length=window))
    S_noisy = np.abs(librosa.stft(noisy_signal, n_fft=nfft, hop_length=noverlap, win_length=window))

    # Call the SOPM function using spectrograms
    score = SOPM(S_clean, S_noisy, MN, VH, moment_type, K_p)
    return score

# SOPM function
def SOPM(A, B, MN=[4, 4], VH=None, moment_type='K', K_p=0.9):
    if VH is None:
        VH = [MN[0] // 2, MN[1] // 2]

    if A.shape != B.shape:
        raise ValueError("The clean and noisy spectrograms must have the same size.")

    M, N = MN
    V, H = VH

    if (M + 2 * V) != (N + 2 * H) or (M + 2 * V) % 2 != 0 or (N + 2 * H) % 2 != 0:
        raise ValueError("Block size [M + 2 * V, N + 2 * H] must be an even, square array.")

    # Select the polynomial type
    if moment_type == 'T':
        polynomial = Tchebichef(M + 2 * V, N + 2 * H)
    else:
        polynomial = krawtchouk(M + 2 * V, K_p, N + 2 * H)

    # Apply moments for clean and noisy spectrograms
    xF_clean = apply_moments(A, polynomial, MN, VH)
    xF_noisy = apply_moments(B, polynomial, MN, VH)

    # Flatten the moment matrices for correlation calculation
    spectrogram_moments_clean = np.vstack(xF_clean)
    spectrogram_moments_noisy = np.vstack(xF_noisy)

    # Calculate SOPM score (correlation between the clean and noisy moments)
    score = np.corrcoef(np.abs(spectrogram_moments_clean).ravel(), np.abs(spectrogram_moments_noisy).ravel())[0, 1]
    score = np.clip(score, 0, 1)  # Ensure score is between 0 and 1
    return score

# Apply moments function
def apply_moments(spectrogram, polynomial, MN, VH):
    M, N = MN
    V, H = VH
    block_size = (M + 2 * V, N + 2 * H)

    # Pad the spectrogram to ensure compatibility with block_shape
    spectrogram_height = spectrogram.shape[0]
    spectrogram_width = spectrogram.shape[1]

    pad_height = (block_size[0] - (spectrogram_height % block_size[0])) % block_size[0] # Calculate padding needed
    pad_width = (block_size[1] - (spectrogram_width % block_size[1])) % block_size[1]

    spectrogram = np.pad(spectrogram, ((0, pad_height), (0, pad_width)), mode='constant') # Pad with zeros

    # Divide the spectrogram into blocks
    blocks = view_as_blocks(spectrogram, block_size)
    all_blocks = []

    for block_row in blocks:
        for block in block_row:
            blk_moments = block_processing(block, polynomial)
            all_blocks.append(blk_moments)

    return all_blocks


# Block processing function
def block_processing(in_array, polynomial):
    blk_moments = np.dot(polynomial, np.dot(in_array, polynomial.T))
    return blk_moments[-1:, :]  # Equivalent to MATLAB's blk_moments((r1-1):end,:)

# Tchebichef polynomial function
def Tchebichef(N, Ord):
    T = np.zeros((Ord, N), dtype=np.float64)
    T[0, 0] = 1.0 / np.sqrt(N)

    for n in range(1, Ord):
        T[n, 0] = -1.0 * np.sqrt((N - n) / (N + n)) * np.sqrt((2 * n + 1.0) / (2 * n - 1.0)) * T[n - 1, 0]

    for x in range(2, N // 2):
        for n in range(Ord):
            b1 = -n * (n + 1.0) - (2 * x - 1) * (x - N - 1.0) - x
            lamda1 = b1 / (x * (N - x))
            lamda2 = ((x - 1.0) * (x - N - 1.0)) / (x * (N - x))
            T[n, x] = lamda1 * T[n, x - 1] + lamda2 * T[n, x - 2]

    for x in range(N // 2, N):
        for n in range(Ord):
            T[n, x] = T[n, N - 1 - x] / ((-1) ** n)

    return T

# Krawtchouk polynomial function
def krawtchouk(N, p, Ord):
    K = np.zeros((N, N), dtype=np.float64)
    K[0, 0] = np.sqrt((1.0 - p) ** (N - 1.0))

    for n in range(1, Ord):
        K[n, 0] = np.sqrt((p * (N - n)) / (n * (1.0 - p))) * K[n - 1, 0]

    for x in range(1, N // 2 - 1):
        for n in range(N):
            A = (p * (N - 1.0 - x)) / np.sqrt((p * (N - 1.0 - x)) / ((1 - p) * (x + 1)))
            B = -1.0 * n + p * (N - 1.0 - x) + x * (1.0 - p)
            C = (x * (1.0 - p)) / np.sqrt((x * (1.0 - p)) / (p * (N - x)))
            K[n, x + 1] = (B / A) * K[n, x] - (C / A) * K[n, x - 1]

    for x in range(N // 2, N):
        for n in range(N):
            K[n, x] = (-1) ** (n + x - 1) * K[N - n - 1, N - x - 1]

    return K[:Ord, :N]

# Calculate and display SOPM score
sopm_score = SOPM_from_audio(clean_signal, noisy_signal)
print(f"SOPM Score: {sopm_score}")
